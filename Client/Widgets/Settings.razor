@namespace Oqtane.Blogs.Widgets
@using Oqtane.Blogs.Services
@using Oqtane.Blogs.Shared
@inherits ModuleBase
@implements Oqtane.Interfaces.ISettingsControl
@inject ISettingService SettingService
@inject IPageService PageService
@inject IModuleService ModuleService
@inject IPageModuleService PageModuleService
@inject IWidgetTemplateService WidgetTemplateService
@inject IStringLocalizer<Settings> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (_initialized)
{
    <form @ref="form" class="@(validated ? "was-validated" : "needs-validation")" novalidate>
        <div class="container">
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="blogModule" ResourceKey="BlogModule" ResourceType="@resourceType" HelpText="Select the blog module">Blog module: </Label>
                <div class="col-sm-9">
                    <select id="blogModule" class="form-select" @bind="_blogModule">
                        <option value="">&lt;@SharedLocalizer["Not Specified"]&gt;</option>
                        @foreach (var kvp in _blogModules)
                        {
                            <option value="@kvp.Key">@kvp.Value</option>
                        }
                    </select>
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="widget" ResourceKey="Widget" ResourceType="@resourceType" HelpText="Select a widget">Widget: </Label>
                <div class="col-sm-9">
                    <select id="widget" @bind-value="_widget" @bind-value:event="oninput" class="form-select" @onchange="WidgetChanged">
                        <option value="">&lt;@SharedLocalizer["Not Specified"]&gt;</option>
                        @foreach (var widget in BlogConstants.AvailableWidgets)
                        {
                            <option value="@widget">@Localizer[widget]</option>
                        }
                    </select>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(_widget))
            {
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="template" ResourceKey="WidgetTemplate" ResourceType="@resourceType" HelpText="Edit the widget template">Template: </Label>
                    <div class="col-sm-9">
                        <textarea id="template" class="form-control" @bind="_widgetTemplate" rows="5" />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="itemsCount" ResourceKey="WidgetItemsCount" ResourceType="@resourceType" HelpText="Enter the widget items count">Items Count: </Label>
                    <div class="col-sm-9">
                        <input id="itemsCount" type="number" class="form-control" @bind="_widgetItemsCount" />
                    </div>
                </div>
            }
        </div>
    </form>
}
else
{
    <div class="app-progress-indicator"></div>
}

@code {
    private string resourceType = "Oqtane.Blogs.Widgets.Settings, Oqtane.Blogs.Client.Oqtane"; // for localization
    
    private ElementReference form;
    private bool validated = false;

    private string _blogModule;
    private IDictionary<int, string> _blogModules;
    private string _widget;
    private string _widgetTemplate;
    private string _widgetItemsCount;
    private bool _initialized;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _blogModules = await LoadBlogModules();
            _blogModule = SettingService.GetSetting(ModuleState.Settings, "BlogModule", "");
            _widget = SettingService.GetSetting(ModuleState.Settings, "Widget", "");
            _widgetTemplate = SettingService.GetSetting(ModuleState.Settings, "WidgetTemplate", "");
            _widgetItemsCount = SettingService.GetSetting(ModuleState.Settings, "WidgetItemsCount", "10");

            _initialized = true;
        }
        catch (Exception ex)
        {
            AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

    public async Task UpdateSettings()
    {
        try
        {
            var settings = await SettingService.GetModuleSettingsAsync(ModuleState.ModuleId);
            settings = SettingService.SetSetting(settings, "BlogModule", _blogModule);
            settings = SettingService.SetSetting(settings, "Widget", _widget);
            settings = SettingService.SetSetting(settings, "WidgetTemplate", _widgetTemplate);
            settings = SettingService.SetSetting(settings, "WidgetItemsCount", _widgetItemsCount);

            //also save the blog page id so that it can be referenced later
            if (!string.IsNullOrEmpty(_blogModule) && int.TryParse(_blogModule, out int blogModuleId))
            {
                var pageId = (await ModuleService.GetModulesAsync(PageState.Site.SiteId)).FirstOrDefault(i => i.ModuleId == blogModuleId)?.PageId ?? 0;
                settings = SettingService.SetSetting(settings, "BlogPage", pageId.ToString());
            }
            await SettingService.UpdateModuleSettingsAsync(settings, ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

    private async Task<IDictionary<int, string>> LoadBlogModules()
    {
        var blogModules = new Dictionary<int, string>();
        var modules = (await ModuleService.GetModulesAsync(PageState.Site.SiteId))
            .Where(i => i.ModuleDefinitionName == "Oqtane.Blogs, Oqtane.Blogs.Client.Oqtane" && !i.IsDeleted)
            .ToList();

        foreach (var module in modules)
        {
            var page = await PageService.GetPageAsync(module.PageId);
            var pageModule = await PageModuleService.GetPageModuleAsync(module.PageModuleId);
            if (page != null && pageModule != null && !pageModule.IsDeleted)
            {
                var key = module.ModuleId;
                var value = $"{page.Name} - {pageModule.Title}";
                blogModules.Add(key, value);
            }
        }

        return blogModules;
    }

    private void WidgetChanged(ChangeEventArgs e)
    {
        _widget = Convert.ToString(e.Value);
        _widgetTemplate = WidgetTemplateService.GetWidgetTemplate(ModuleState.Settings, _widget);
    }
}
