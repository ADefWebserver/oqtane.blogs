@namespace Oqtane.Blogs
@inherits ModuleBase
@inject ISettingService SettingService
@implements Oqtane.Interfaces.ISettingsControl
@inject IStringLocalizer<Edit> Localizer

<form @ref="form" class="@(validated ? "was-validated" : "needs-validation")" novalidate>
    <div class="container">
        <div class="row mb-1 align-items-center">
            <Label For="items" ResourceKey="Items" ResourceType="@resourceType" HelpText="Enter the maximum items per page">Items Per Page: </Label>
            <div class="col-sm-9">
                <input id="items" type="text" class="form-control" @bind="@_items" maxlength="1" required />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label For="summary" ResourceKey="Summary" ResourceType="@resourceType" HelpText="Enter the summary blog template">Summary Template: </Label>
            <div class="col-sm-9">
                <textarea id="summary" class="form-control" @bind="@_summary" rows="5" required></textarea>
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label For="detail" ResourceKey="Detail" ResourceType="@resourceType" HelpText="Enter the detail blog template">Detail Template: </Label>
            <div class="col-sm-9">
                <textarea id="detail" class="form-control" @bind="@_detail" rows="5" required></textarea>
            </div>
        </div>
    </div>
</form>

@code {
    private string resourceType = "Oqtane.Blogs.Settings, Oqtane.Blogs.Client.Oqtane"; // for localization

    private ElementReference form;
    private bool validated = false;

    private string _items;
    private string _summary;
    private string _detail;

    protected override void OnInitialized()
    {
        try
        {
            _items = SettingService.GetSetting(ModuleState.Settings, "Items", "10");
            _summary = SettingService.GetSetting(ModuleState.Settings, "Summary", "<a href=\"[URL]\"><h2>[TITLE]</h2></a><p>[SUMMARY]</p>");
            _detail = SettingService.GetSetting(ModuleState.Settings, "Detail", "<h2>[TITLE]</h2><p>[CONTENT]</p>");
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

    public async Task UpdateSettings()
    {
        try
        {
            var settings = await SettingService.GetModuleSettingsAsync(ModuleState.ModuleId);
            settings = SettingService.SetSetting(settings, "Items", _items);
            settings = SettingService.SetSetting(settings, "Summary", _summary);
            settings = SettingService.SetSetting(settings, "Detail", _detail);
            await SettingService.UpdateModuleSettingsAsync(settings, ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }
}
