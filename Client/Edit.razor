@using Oqtane.Blogs.Services
@using Oqtane.Blogs.Models

@namespace Oqtane.Blogs
@inherits ModuleBase
@inject IBlogService BlogService
@inject ISettingService SettingService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Edit> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

<form @ref="form" class="@(validated ? "was-validated" : "needs-validation")" novalidate>
    <div class="container">
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="title" ResourceKey="Title" HelpText="Enter the title of your blog">Title: </Label>
            <div class="col-sm-9">
                <input id="title" type="text" class="form-control" @bind="@_title" maxlength="256" required />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="summary" ResourceKey="Summary" HelpText="Enter the summary of your blog">Summary: </Label>
            <div class="col-sm-9">
                <textarea id="summary" class="form-control" @bind="@_summary" rows="3" maxlength="512" required></textarea>
            </div>
        </div>
        <br />
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="content" ResourceKey="Content" HelpText="Enter the content of your blog">Content: </Label>
            <div class="col-sm-9">
                <RichTextEditor Content="@_content" @ref="@RichTextEditorHtml" AllowRawHtml="@(_editor == "" || _editor == "raw")" AllowRichText="@(_editor == "" || _editor == "rich")"></RichTextEditor>
            </div>
        </div>
        <br />
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="published" ResourceKey="Published" HelpText="Indicate if this blog is visible to all users or only editors">Published? </Label>
            <div class="col-sm-9">
                <select id="published" class="form-select" @bind="@_published">
                    <option value="True">@SharedLocalizer["Yes"]</option>
                    <option value="False">@SharedLocalizer["No"]</option>
                </select>
            </div>
        </div>
    </div>
    <br /><br />
    <button type="button" class="btn btn-success" @onclick="SaveBlog">@Localizer["Save"]</button>
    <NavLink class="btn btn-secondary" href="@PageState.ReturnUrl">@Localizer["Cancel"]</NavLink>
    @if (_id != -1)
    {
        <ActionDialog Header="Delete Blog" Message="Are You Sure You Wish To Delete This Blog?" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger ms-1" ResourceKey="DeleteBlog" OnClick="@(async () => await DeleteBlog())" />
        @if (_published == "True" && SettingService.GetSetting(ModuleState.Settings, "Subscriptions", "False") == "True")
        {
            <button type="button" class="btn btn-info ms-1" @onclick="Notify">@Localizer["Notify"]</button>
        }
        <br /><br />
        <AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon"></AuditInfo>
    }
</form>

@code {
    public override SecurityAccessLevel SecurityAccessLevel { get { return SecurityAccessLevel.Edit; } }

    public override string Actions { get { return "Add,Edit"; } }

    public override string Title => "Manage Blog Post";

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "css/quill/quill.bubble.css" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "css/quill/quill.snow.css" }
    };

    private ElementReference form;
    private bool validated = false;

    private int _id = -1;
    private string _title;
    private string _summary;
    private string _editor;
    private RichTextEditor RichTextEditorHtml;
    private string _content = "";
    private string _published = "False";
    private string _createdby;
    private DateTime _createdon;
    private string _modifiedby;
    private DateTime _modifiedon;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _editor = SettingService.GetSetting(ModuleState.Settings, "Editor", "");

            if (PageState.QueryString.ContainsKey("id"))
            {
                _id = Int32.Parse(PageState.QueryString["id"]);
                Blog blog = await BlogService.GetBlogAsync(_id, ModuleState.ModuleId);
                if (blog != null)
                {
                    _title = blog.Title;
                    _summary = blog.Summary;
                    _content = blog.Content;
                    _content = Utilities.FormatContent(_content, PageState.Alias, "render");
                    _published = blog.Published.ToString();
                    _createdby = blog.CreatedBy;
                    _createdon = blog.CreatedOn;
                    _modifiedby = blog.ModifiedBy;
                    _modifiedon = blog.ModifiedOn;
                }
                else
                {
                    await logger.LogError("Error Loading Blog {BlogId} {Error}", _id);
                    AddModuleMessage(Localizer["Error Loading Blog"], MessageType.Error);
                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Blog {BlogId} {Error}", _id, ex.Message);
            AddModuleMessage(Localizer["Error Loading Blog"], MessageType.Error);
        }
    }

    private async Task SaveBlog()
    {
        validated = true;
        var interop = new Interop(JSRuntime);
        if (await interop.FormValid(form))
        {
            try
            {
                _content = await RichTextEditorHtml.GetHtml();
                _content = Utilities.FormatContent(_content, PageState.Alias, "save");

                if (_id == -1)
                {
                    Blog blog = new Blog();
                    blog.ModuleId = ModuleState.ModuleId;
                    blog.Title = _title;
                    blog.Summary = _summary;
                    blog.Content = _content;
                    blog.Published = bool.Parse(_published);
                    blog = await BlogService.AddBlogAsync(blog);
                    _id = blog.BlogId;
                    await logger.LogInformation("Blog Added {Blog}", blog);
                }
                else
                {
                    Blog blog = await BlogService.GetBlogAsync(_id, ModuleState.ModuleId);
                    if (blog != null)
                    {
                        blog.Title = _title;
                        blog.Summary = _summary;
                        blog.Content = _content;
                        blog.Published = bool.Parse(_published);
                        blog = await BlogService.UpdateBlogAsync(blog);
                        await logger.LogInformation("Blog Updated {Blog}", blog);
                    }
                }
                NavigationManager.NavigateTo(PageState.ReturnUrl);
            }
            catch (Exception ex)
            {
                await logger.LogError(ex, "Error Saving Blog {BlogId} {Error}", _id, ex.Message);
                AddModuleMessage(Localizer["Error Saving Blog"], MessageType.Error);
            }
        }
        else
        {
            AddModuleMessage(SharedLocalizer["Message.InfoRequired"], MessageType.Warning);
        }
    }

    private async Task DeleteBlog()
    {
        try
        {
            await BlogService.DeleteBlogAsync(_id, ModuleState.ModuleId);
            await logger.LogInformation("Blog Deleted {BlogId}", _id);
            NavigationManager.NavigateTo(PageState.ReturnUrl);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Blog {BlogId} {Error}", _id, ex.Message);
            AddModuleMessage(Localizer["ErrorDeleting"], MessageType.Error);
        }
    }

    private async Task Notify()
    {
        ShowProgressIndicator();

        try
        {
            var subscribers = await BlogService.NotifyAsync(_id, ModuleState.ModuleId);
            AddModuleMessage(string.Format(Localizer["Message.Notified"], subscribers), MessageType.Success, "bottom");
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Sending Notifications {BlogId} {Error}", _id, ex.Message);
            AddModuleMessage(Localizer["Error Sending Notifications"], MessageType.Error);
        }

        HideProgressIndicator();
    }
}
