@using Oqtane.Blogs.Services
@using Oqtane.Blogs.Models
@using Oqtane.Blogs.Shared
@namespace Oqtane.Blogs
@inherits ModuleBase
@inject IBlogService BlogService
@inject IFileService FileService
@inject IBlogContentService BlogContentService
@inject ISettingService SettingService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Edit> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (initialized)
{
    <TabStrip>
        <TabPanel Name="Edit" Heading="Edit" ResourceKey="Edit">
            <form @ref="form" class="@(validated ? "was-validated" : "needs-validation")" novalidate>
                <div class="container">
                    <div class="row mb-1 align-items-center">
                        <Label Class="col-sm-3" For="title" ResourceKey="Title" HelpText="Enter the title of your blog">Title: </Label>
                        <div class="col-sm-9">
                            <input id="title" type="text" class="form-control" value="@_title" maxlength="256" required @onchange="TitleChanged" />
                        </div>
                    </div>
                    <div class="row mb-1 align-items-center">
                        <Label Class="col-sm-3" For="slug" ResourceKey="Slug" HelpText="Enter the slug of your blog">Slug: </Label>
                        <div class="col-sm-9">
                            <input id="slug" type="text" class="form-control" @bind="@_slug" maxlength="256" required />
                        </div>
                    </div>
                    <div class="row mb-1 align-items-center">
                        <Label Class="col-sm-3" For="thumbnail" ResourceKey="Thumbnail" HelpText="Enter the thumbnail URL">Thumbnail: </Label>
                        <div class="col-sm-9">
                            <input id="thumbnail" type="text" class="form-control" @bind="@_thumbnailPath" maxlength="500" />
                        </div>
                    </div>
                    <div class="row mb-1 align-items-center">
                        <div class="col-sm-9 offset-sm-3">
                            @if (_richfilemanager)
                            {
                                <FileManager @ref="_fileManager" Filter="@PageState.Site.ImageFiles" />
                                <ModuleMessage Message="@_message" Type="MessageType.Warning"></ModuleMessage>
                                <br />
                            }
                            <div class="d-flex mb-2">
                                <button type="button" class="btn btn-primary" @onclick="InsertRichImage">@Localizer["InsertImage"]</button>
                                @if (_richfilemanager)
                                {
                                    @((MarkupString)"&nbsp;&nbsp;")
                                    <button type="button" class="btn btn-secondary" @onclick="CloseRichFileManager">@Localizer["Close"]</button>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="row mb-1 align-items-center">
                        <Label Class="col-sm-3" For="alternateText" ResourceKey="AlternateText" HelpText="Enter the alternate text for the thumbnail">Alternate Text: </Label>
                        <div class="col-sm-9">
                            <input id="alternateText" type="text" class="form-control" @bind="@_alternateText" maxlength="200" />
                        </div>
                    </div>
                    <div class="row mb-1 align-items-center">
                        <Label Class="col-sm-3" For="title" ResourceKey="Categories" HelpText="Select the categories of your blog">Categories: </Label>
                        <div class="col-sm-9">
                            <div class="input-group">
                                <input class="form-control dropdown-toggle" data-bs-toggle="dropdown" data-bs-auto-close="outside" readonly @bind-value="_categoriesName" required />
                                <ul class="dropdown-menu w-100">
                                    @if (_categorySources != null)
                                    {
                                        foreach (var cat in _categorySources)
                                        {
                                            <li class="px-3 py-1">
                                                <input type="checkbox" class="form-check-input" id="cat-@cat.CategorySourceId" @onchange="@((e) => CategoryChanged(cat, e))" checked="@_categories.Contains(cat.CategorySourceId)" />
                                                <label for="cat-@cat.CategorySourceId" class="ms-1">@cat.Name</label>
                                            </li>
                                        }
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="row mb-1 align-items-center">
                        <Label Class="col-sm-3" For="summary" ResourceKey="Summary" HelpText="Enter the summary of your blog">Summary: </Label>
                        <div class="col-sm-9">
                            <textarea id="summary" class="form-control" @bind="@_summary" rows="3" maxlength="512" required></textarea>
                        </div>
                    </div>
                    <br />
                    <div class="row mb-1 align-items-center">
                        <Label Class="col-sm-3" For="content" ResourceKey="Content" HelpText="Enter the content of your blog">Content: </Label>
                        <div class="col-sm-9">
                            <RichTextEditor Content="@_content" @ref="@RichTextEditorHtml"></RichTextEditor>
                        </div>
                    </div>
                    <br />
                    <div class="row mb-1 align-items-center">
                        <Label Class="col-sm-3" For="published" ResourceKey="Published" HelpText="Indicate if this blog is visible to all users or only editors">Published? </Label>
                        <div class="col-sm-9">
                            <select id="published" class="form-select" @bind="@_publishStatus">
                                <option value="0">@SharedLocalizer["Draft"]</option>
                                <option value="1">@SharedLocalizer["Published"]</option>
                                <option value="2">@SharedLocalizer["Scheduled"]</option>
                            </select>
                        </div>
                    </div>
                    @if (_publishStatus == ((int)PublishStatus.Scheduled).ToString())
                    {
                        <div class="row mb-1 align-items-center">
                            <Label Class="col-sm-3" For="publishDate" ResourceKey="PublishDate" HelpText="Select the publish date of your blog">Publish Date: </Label>
                            <div class="col-sm-9">
                                <input id="publishDate" type="datetime-local" class="form-control" @bind="@_publishDate" maxlength="50" required />
                            </div>
                        </div>
                    }
                    <div class="row mb-1 align-items-center">
                        <Label Class="col-sm-3" For="tags" ResourceKey="Tags" HelpText="Enter the tags of your blog">Tags: </Label>
                        <div class="col-sm-9">
                            <input id="tags" type="text" class="form-control" @bind="@_tagsValue" maxlength="50" />
                        </div>
                    </div>
                </div>
                <br /><br />
                <button type="button" class="btn btn-success" @onclick="SaveBlog">@Localizer["Save"]</button>
                <NavLink class="btn btn-secondary" href="@PageState.ReturnUrl">@Localizer["Cancel"]</NavLink>
                @if (_id != -1)
                {
                    <ActionDialog Header="Delete Blog" Message="Are You Sure You Wish To Delete This Blog?" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger ms-1" ResourceKey="DeleteBlog" OnClick="@(async () => await DeleteBlog())" />
                    @if (_publishStatus == ((int)PublishStatus.Published).ToString() && SettingService.GetSetting(ModuleState.Settings, "Subscriptions", "False") == "True")
                    {
                        <button type="button" class="btn btn-info ms-1" @onclick="Notify">@Localizer["Notify"]</button>
                    }
                    <br />

                    <br />
                    <AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon"></AuditInfo>
                }
            </form>
        </TabPanel>
        @if (_id != -1)
        {
            <TabPanel Name="Versions" Heading="Versions" ResourceKey="Versions">
                <Pager Items="@_blogContents">
                    <Header>
                    <th style="width: 1px;">&nbsp;</th>
                    <th style="width: 1px;">&nbsp;</th>
                    <th>@SharedLocalizer["CreatedOn"]</th>
                    <th>@SharedLocalizer["CreatedBy"]</th>
                    </Header>
                    <Row>
                        <td><ActionDialog Header="Restore Content" Message="@string.Format(Localizer["Confirm.Restore"], context.CreatedOn)" Action="Restore" Security="SecurityAccessLevel.Edit" Class="btn btn-success" OnClick="@(async () => await RestoreContent(context))" ResourceKey="Restore" /></td>
                        <td><ActionDialog Header="Delete Content" Message="@string.Format(Localizer["Confirm.Delete"], context.CreatedOn)" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await DeleteContent(context))" ResourceKey="Delete" /></td>
                        <td>@context.CreatedOn</td>
                        <td>@context.CreatedBy</td>
                    </Row>
                </Pager>
            </TabPanel>
        }
        @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.PermissionList))
        {
            <TabPanel Name="Categories" Heading="Categories" ResourceKey="Categories">
                @if (!_editing)
                {
                    @if (_categorySources != null)
                    {
                        <div class="text-center mb-2">
                            <button type="button" class="btn btn-primary" @onclick="AddCategory">@Localizer["AddCategory"]</button>
                        </div>
                        <Pager Items="@_categorySources">
                            <Header>
                            <th style="width: 1px;">&nbsp;</th>
                            <th style="width: 1px;">&nbsp;</th>
                            <th>@SharedLocalizer["Name"]</th>
                            </Header>
                            <Row>
                                <td><ActionLink Action="Edit" Security="SecurityAccessLevel.Edit" OnClick="@(() => EditCategory(context))" ResourceKey="Edit" /></td>
                                <td><ActionDialog Header="Delete Category" Message="@string.Format(Localizer["Confirm.Delete"], context.CreatedOn)" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await DeleteCategory(context))" ResourceKey="Delete" /></td>
                                <td>@context.Name (@context.BlogCount)</td>
                            </Row>
                        </Pager>
                    }
                }
                else
                {
                    <div class="category-editor">
                        <div class="container">
                            <div class="row mb-1 align-items-center">
                                <Label Class="col-sm-3" For="name" ResourceKey="CategoryName">Category Name</Label>
                                <div class="col-sm-9">
                                    <input id="name" type="text" class="form-control" @bind="@_name" maxlength="50" required />
                                </div>
                            </div>
                            <div class="row mb-1 align-items-center">
                                <div class="col-sm-9 col-offset-sm-3">
                                    <button type="button" class="btn btn-primary" @onclick="@(async () => await SaveCategory())">@Localizer["Save"]</button>
                                    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">@Localizer["Cancel"]</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </TabPanel>
        }
    </TabStrip>
}


@code {
    public override SecurityAccessLevel SecurityAccessLevel { get { return SecurityAccessLevel.Edit; } }

    public override string Actions { get { return "Add,Edit"; } }

    public override string Title => "Manage Blog Post";

    private const int CheckedValue = 1;

    private bool initialized = false;
    private ElementReference form;
    private bool validated = false;

    private int _id = -1;
    private List<int> _categories = new List<int>();
    private string _categoriesName;
    private string _title;
    private string _slug;
    private int _thumbnail;
    private string _thumbnailPath;
    private string _alternateText;
    private string _summary;
    private RichTextEditor RichTextEditorHtml;
    private string _content = "";
    private string _publishStatus = ((int)PublishStatus.Draft).ToString();
    private DateTime? _publishDate;
    private string _tagsValue;
    private string _createdby;
    private DateTime _createdon;
    private string _modifiedby;
    private DateTime _modifiedon;

    private FileManager _fileManager;
    private bool _richfilemanager = false;
    private string _message = string.Empty;

    private List<BlogContent> _blogContents;

    private List<CategorySource> _categorySources;
    private bool _editing;
    private string _name;
    private int _editId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _categorySources = await CategoryService.GetCategorySourcesAsync(ModuleState.ModuleId);

            if (PageState.QueryString.ContainsKey("id"))
            {
                _id = Int32.Parse(PageState.QueryString["id"]);
                Blog blog = await BlogService.GetBlogAsync(_id, ModuleState.ModuleId);
                if (blog != null)
                {
                    _title = blog.Title;
                    _slug = blog.Slug;
                    _thumbnail = blog.Thumbnail;
                    _alternateText = blog.AlternateText;
                    _categories = blog.BlogCategories.Select(i => i.CategorySourceId).ToList();
                    _categoriesName = string.Join(",", blog.BlogCategories.Select(i => i.CategorySource.Name));
                    _tagsValue = string.Join(",", blog.BlogTags.Select(i => i.TagSource.Tag));
                    _createdby = blog.CreatedBy;
                    _createdon = blog.CreatedOn;
                    _modifiedby = blog.ModifiedBy;
                    _modifiedon = blog.ModifiedOn;

                    //get the latest version
                    var blogContents = await BlogContentService.GetBlogContentAsync(ModuleState.ModuleId, blog.BlogId);
                    var blogContent = blogContents.OrderByDescending(i => i.BlogContentId).FirstOrDefault();
                    if(blogContent != null)
                    {
                        _summary = blogContent.Summary;
                        _content = Utilities.FormatContent(blogContent.Content, PageState.Alias, "render");
                        _publishStatus = ((int)blogContent.PublishStatus).ToString();
                        _publishDate = blogContent.PublishDate;
                    }

                    //display the thumbnail file info
                    if(_thumbnail > 0)
                    {
                        var file = await FileService.GetFileAsync(_thumbnail);
                        _thumbnailPath = file?.Url ?? string.Empty;
                    }
                }
                else
                {
                    await logger.LogError("Error Loading Blog {BlogId} {Error}", _id);
                    AddModuleMessage(Localizer["Error Loading Blog"], MessageType.Error);
                }
            }

            initialized = true;
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Blog {BlogId} {Error}", _id, ex.Message);
            AddModuleMessage(Localizer["Error Loading Blog"], MessageType.Error);
        }
    }

    private async Task SaveBlog()
    {
        validated = true;
        var interop = new Interop(JSRuntime);
        if (await interop.FormValid(form))
        {
            try
            {
                if(_publishStatus == ((int)PublishStatus.Scheduled).ToString() && _publishDate == null)
                {
                    AddModuleMessage(Localizer["PublishDate.Required"], MessageType.Warning);
                    return;
                }

                var checkBlog = await BlogService.GetBlogBySlugAsync(_slug, ModuleState.ModuleId);
                if (checkBlog != null && checkBlog.BlogId != _id)
                {
                    AddModuleMessage(Localizer["SlugExist"], MessageType.Warning);
                    return;
                }

                if (!_categories.Any())
                {
                    AddModuleMessage(Localizer["Categories.Required"], MessageType.Warning);
                    return;
                }

                ClearModuleMessage();
                _content = await RichTextEditorHtml.GetHtml();
                _content = Utilities.FormatContent(_content, PageState.Alias, "save");

                if (_id == -1)
                {
                    Blog blog = new Blog
                    {
                        ModuleId = ModuleState.ModuleId,
                        Title = _title,
                        Slug = _slug,
                        Thumbnail = _thumbnail,
                        AlternateText = _alternateText,
                        Categories = string.Join(",", _categories),
                        Tags = _tagsValue
                    };
                    blog = await BlogService.AddBlogAsync(blog);
                    _id = blog.BlogId;
                    await logger.LogInformation("Blog Added {Blog}", blog);
                }
                else
                {
                    Blog blog = await BlogService.GetBlogAsync(_id, ModuleState.ModuleId);
                    if (blog != null)
                    {
                        blog.Title = _title;
                        blog.Slug = _slug;
                        blog.Thumbnail = _thumbnail;
                        blog.AlternateText = _alternateText;
                        blog.Categories = string.Join(",", _categories);
                        blog.Tags = _tagsValue;
                        blog = await BlogService.UpdateBlogAsync(blog);
                        await logger.LogInformation("Blog Updated {Blog}", blog);
                    }
                }

                //update blog content
                var blogContents = await BlogContentService.GetBlogContentAsync(ModuleState.ModuleId, _id);
                var blogContent = blogContents.OrderByDescending(i => i.BlogContentId).FirstOrDefault();
                var publishStatus = (PublishStatus)Convert.ToInt32(_publishStatus);
                if (_summary != blogContent?.Summary || _content != blogContent?.Content || publishStatus != blogContent?.PublishStatus || _publishDate != blogContent?.PublishDate)
                {
                    if (blogContent == null
                        || blogContent.PublishStatus == PublishStatus.Published
                        || (blogContent.PublishStatus == PublishStatus.Scheduled && blogContent.PublishDate <= DateTime.UtcNow))
                    {
                        //set publish status to draft for new edited version.
                        if (blogContent != null)
                        {
                            publishStatus = PublishStatus.Draft;
                            _publishDate = null;
                        }

                        blogContent = new BlogContent
                            {
                                BlogId = _id,
                                Version = blogContent != null ? blogContent.Version + 1 : BlogConstants.DefaultVersion,
                                Summary = _summary,
                                Content = _content,
                                PublishStatus = publishStatus,
                                PublishDate = _publishDate
                            };

                        await BlogContentService.AddBlogContentAsync(ModuleState.ModuleId, blogContent);
                    }
                    else
                    {
                        blogContent.Summary = _summary;
                        blogContent.Content = _content;
                        blogContent.PublishStatus = publishStatus;
                        blogContent.PublishDate = _publishDate;

                        await BlogContentService.UpdateBlogContentAsync(ModuleState.ModuleId, blogContent);
                    }
                }

                NavigationManager.NavigateTo(PageState.ReturnUrl);
            }
            catch (Exception ex)
            {
                await logger.LogError(ex, "Error Saving Blog {BlogId} {Error}", _id, ex.Message);
                AddModuleMessage(Localizer["Error Saving Blog"], MessageType.Error);
            }
        }
        else
        {
            AddModuleMessage(SharedLocalizer["Message.InfoRequired"], MessageType.Warning);
        }
    }

    private async Task DeleteBlog()
    {
        try
        {
            await BlogService.DeleteBlogAsync(_id, ModuleState.ModuleId);
            await logger.LogInformation("Blog Deleted {BlogId}", _id);
            NavigationManager.NavigateTo(PageState.ReturnUrl);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Blog {BlogId} {Error}", _id, ex.Message);
            AddModuleMessage(Localizer["ErrorDeleting"], MessageType.Error);
        }
    }

    private async Task Notify()
    {
        ShowProgressIndicator();

        try
        {
            var subscribers = await BlogService.NotifyAsync(_id, ModuleState.ModuleId);
            AddModuleMessage(string.Format(Localizer["Message.Notified"], subscribers), MessageType.Success, "bottom");
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Sending Notifications {BlogId} {Error}", _id, ex.Message);
            AddModuleMessage(Localizer["Error Sending Notifications"], MessageType.Error);
        }

        HideProgressIndicator();
    }

    private void TitleChanged(ChangeEventArgs e)
    {
        _title = Convert.ToString(e.Value);
        _slug = Common.FormatSlug(_title);
        StateHasChanged();
    }

    private void CategoryChanged(CategorySource cat, ChangeEventArgs e)
    {
        if (Convert.ToInt32(e.Value) == CheckedValue && !_categories.Contains(cat.CategorySourceId))
        {
            _categories.Add(cat.CategorySourceId);
        }
        else
        {
            _categories.Remove(cat.CategorySourceId);
        }

        _categoriesName = string.Join(", ", _categorySources.Where(i => _categories.Contains(i.CategorySourceId)).Select(i => i.Name));

        StateHasChanged();
    }

    public void InsertRichImage()
    {
        _message = string.Empty;
        if (_richfilemanager)
        {
            var file = _fileManager.GetFile();
            if (file != null)
            {
                _thumbnail = file.FileId;
                _thumbnailPath = file.Url;
                _richfilemanager = false;
            }
            else
            {
                _message = Localizer["Message.Require.Image"];
            }
        }
        else
        {
            _richfilemanager = true;
        }

        StateHasChanged();
    }

    public void CloseRichFileManager()
    {
        _richfilemanager = false;
        _message = string.Empty;

        StateHasChanged();
    }

    private async Task RestoreContent(BlogContent blogContent)
    {
        try
        {
            await BlogContentService.RestoreBlogContentAsync(ModuleState.ModuleId, blogContent);
            _blogContents = await BlogContentService.GetBlogContentAsync(ModuleState.ModuleId, blogContent.BlogId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Restoring Content {Error}", ex.Message);
            AddModuleMessage(Localizer["Error.Content.Restore"], MessageType.Error);
        }
    }

    private async Task DeleteContent(BlogContent blogContent)
    {
        try
        {
            await BlogContentService.DeleteBlogContentAsync(ModuleState.ModuleId, blogContent.BlogId, blogContent.BlogContentId);
            _blogContents = await BlogContentService.GetBlogContentAsync(ModuleState.ModuleId, blogContent.BlogId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Content {Error}", ex.Message);
            AddModuleMessage(Localizer["Error.Content.Delete"], MessageType.Error);
        }
    }

    private void AddCategory()
    {
        _editId = 0;
        _editing = true;
    }

    private void EditCategory(CategorySource categorySource)
    {
        _editId = categorySource.CategorySourceId;
        _name = categorySource.Name;

        _editing = true;
        StateHasChanged();
    }

    private async Task DeleteCategory(CategorySource categorySource)
    {
        await CategoryService.DeleteCategorySourceAsync(categorySource.CategorySourceId, ModuleState.ModuleId);

        _categorySources = await CategoryService.GetCategorySourcesAsync(ModuleState.ModuleId);
        StateHasChanged();
    }

    private async Task SaveCategory()
    {
        if (string.IsNullOrEmpty(_name))
        {
            AddModuleMessage(Localizer["Name.Required"], MessageType.Warning);
            return;
        }

        var existCat = _categorySources.FirstOrDefault(i => i.Name.Equals(_name, StringComparison.OrdinalIgnoreCase)
                                                && (_editId == 0 || i.CategorySourceId != Convert.ToInt32(_editId)));
        if (existCat != null)
        {
            AddModuleMessage(Localizer["Name.RequireUnique"], MessageType.Warning);
            return;
        }

        ClearModuleMessage();

        if (_editId > 0)
        {
            var id = Convert.ToInt32(_editId);
            var categorySource = _categorySources.FirstOrDefault(i => i.CategorySourceId == id);
            if (categorySource != null)
            {
                categorySource.Name = _name;
                await CategoryService.UpdateCategorySourceAsync(categorySource);
            }
        }
        else
        {
            var categorySource = new CategorySource
                {
                    Name = _name,
                    ModuleId = ModuleState.ModuleId
                };

            await CategoryService.AddCategorySourceAsync(categorySource);
        }

        _editing = false;
        _name = string.Empty;
        _editId = 0;
        _categorySources = await CategoryService.GetCategorySourcesAsync(ModuleState.ModuleId);
        StateHasChanged();
    }

    private void CancelEdit()
    {
        _editing = false;
        _name = string.Empty;
        _editId = 0;
        StateHasChanged();
    }
}
