@using Oqtane.Blogs.Services
@using Oqtane.Blogs.Models
@using Oqtane.Blogs.Shared
@using System.Globalization

@namespace Oqtane.Blogs
@inherits ModuleBase
@inject IBlogService BlogService
@inject ISubscriberService SubscriberService
@inject NavigationManager NavigationManager
@inject ISettingService SettingService
@inject IStringLocalizer<Index> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (_blog != null)
{
    <div class="text-center"><NavLink class="btn btn-secondary" href="@NavigateUrl()">@Localizer["ViewAll"]</NavLink></div>
    <br />
    @if (!_blog.Published && UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList))
    {
        <div class="alert alert-warning">
            <p class="mb-0">@Localizer["NotPublished"]</p>
        </div>
    }
    @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode)
    {
        <div class="text-center">
            <ActionLink Action="Edit" Parameters="@($"id=" + _blog.BlogId.ToString())" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="EditBlog" Text="Edit" />
        </div>
    }
    @((MarkupString)Utilities.FormatContent(FormatTemplate(_detail, _blog), PageState.Alias, "render"))

    @if (SettingService.GetSetting(ModuleState.Settings, "Subscriptions", "False") == "True")
    {
        <br />
        <div class="text-center"><strong>@Localizer["Notify"]</strong></div>
        <div class="container mt-2">
            <div class="row mb-1 justify-content-center">
                <div class="col-sm-12 col-md-9 col-lg-6">
                    <form method="post" @onsubmit="Subscribe" @formname="BlogSubscriptionForm">
                        <input type="hidden" name="@Constants.RequestVerificationToken" value="@SiteState.AntiForgeryToken" />
                        <div class="input-group">
                            <input name="email" class="form-control" placeholder="@Localizer["Email"]" @bind="@_email" />
                            <button type="submit" class="btn btn-primary">@Localizer["Subscribe"]</button>
                            <a href="@_rss" target="_new" class="btn btn-secondary">@Localizer["RSS"]</a>
                        </div>
                        <input type="hidden" name="validation" @bind="@_validation" />
                        <input type="hidden" name="date" @bind="@_date" />
                    </form>
                </div>
            </div>
        </div>
    }
    <br />
    <div class="text-center"><NavLink class="btn btn-secondary" href="@NavigateUrl()">@Localizer["ViewAll"]</NavLink></div>
}
else
{
    @if (_blogs != null)
    {
        @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode)
        {
            <div class="text-center mb-2">
                <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="AddBlog" Text="Add Blog" />
            </div>
        }
        
        @if (_blogs.Any())
        {
            <Pager Format="Grid" Items="@_blogs" DisplayPages="1" PageSize="@_items.ToString()" ColumnClass="col-lg-4 col-md-6" SearchProperties="Title,Summary">
                <Row>
                    @((MarkupString)Utilities.FormatContent(FormatTemplate(_summary, context), PageState.Alias, "render"))
                    @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode)
                    {
                        <div class ="text-center">
                            <ActionLink Action="Edit" Parameters="@($"id=" + context.BlogId.ToString())" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="EditBlog" Text="Edit" />
                        </div>
                    }
                </Row>
            </Pager>
        }
        else
        {
            <div class="text-center">@Localizer["NoBlogs"]</div>
        }
        @if (SettingService.GetSetting(ModuleState.Settings, "Subscriptions", "False") == "True")
        {
            <br />
            <div class="text-center"><strong>@Localizer["Notify"]</strong></div>
            <div class="container mt-2">
                <div class="row mb-1 justify-content-center">
                    <div class="col-sm-12 col-md-9 col-lg-6">
                        <form method="post" @onsubmit="Subscribe" @formname="BlogSubscriptionForm">
                            <input type="hidden" name="@Constants.RequestVerificationToken" value="@SiteState.AntiForgeryToken" />
                            <div class="input-group">
                                <input name="email" class="form-control" placeholder="@Localizer["Email"]" @bind="@_email" />
                                <button type="submit" class="btn btn-primary">@Localizer["Subscribe"]</button>
                                <a href="@_rss" target="_new" class="btn btn-secondary">@Localizer["RSS"]</a>
                            </div>
                            <input type="hidden" name="validation" @bind="@_validation" />
                            <input type="hidden" name="date" @bind="@_date" />
                        </form>
                    </div>
                </div>
            </div>

        }
    }
}
<br />

@code {
    public override string UrlParametersTemplate => "/{id}/{slug}";
    public override string RenderMode => RenderModes.Static;

    [SupplyParameterFromForm(FormName = "BlogSubscriptionForm")]
    public string email { get => ""; set => _email = value; }

    [SupplyParameterFromForm(FormName = "BlogSubscriptionForm")]
    public string validation { get => ""; set => _validation = value; }

    [SupplyParameterFromForm(FormName = "BlogSubscriptionForm")]
    public string date { get => ""; set => _date = value; }

    private List<Blog> _blogs;
    private Blog _blog;
    private int _items;
    private string _summary;
    private string _detail;
    private string _email = "";
    private string _validation = "";
    private string _date = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
    private int _mintime = 5; // 5 second minimum
    private int _maxtime = 300; // 5 minute maximum
    private string _rss = "";

    protected override async Task OnInitializedAsync()
    {
        if (PageState.QueryString.ContainsKey("guid"))
        {
            await SubscriberService.DeleteSubscriberAsync(ModuleState.ModuleId, PageState.QueryString["guid"]);
            AddModuleMessage(Localizer["Unsubscribed"], MessageType.Success);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _items = int.Parse(SettingService.GetSetting(ModuleState.Settings, "Items", "10"));
            _summary = SettingService.GetSetting(ModuleState.Settings, "Summary", "<a href=\"[URL]\"><h2>[TITLE]</h2></a><p>[SUMMARY]</p>");
            _detail = SettingService.GetSetting(ModuleState.Settings, "Detail", "<h2>[TITLE]</h2><p>[CONTENT]</p>");

            _blog = null;
            if (!string.IsNullOrEmpty(PageState.UrlParameters))
            {
                _blog = await BlogService.GetBlogAsync(int.Parse(UrlParameters["id"]), ModuleState.ModuleId);
                if (_blog != null && (_blog.Published || UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList)))
                {
                    SetPageTitle(_blog.Title);
                    AddHeadContent($"<meta name=\"description\" content=\"{_blog.Summary}\" />");
                }
                else
                {
                    AddModuleMessage(Localizer["NotFound"], MessageType.Error);
                    _blog = null;
                }
            }
            if (_blog == null)
            {
                await GetBlogs();
            }

            _rss = $"/api/blog/rss/{ModuleState.ModuleId}";
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Blogs {Error}", ex.Message);
        }
    }

    private async Task GetBlogs()
    {
        _blog = null;
        _blogs = await BlogService.GetBlogsAsync(ModuleState.ModuleId, "");
        _blogs = _blogs.Where(item => item.Published || UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList)).ToList();
    }

    private string FormatUrl(Blog blog)
    {
        return NavigateUrl(PageState.Page.Path, AddUrlParameters(blog.BlogId, Common.FormatSlug(blog.Title)));
    }

    private string FormatTemplate(string template, Blog blog)
    {
        template = template.Replace("[ID]", blog.BlogId.ToString());
        template = template.Replace("[TITLE]", blog.Title);
        template = template.Replace("[SUMMARY]", blog.Summary);
        template = template.Replace("[CONTENT]", Utilities.FormatContent(blog.Content, PageState.Alias, "render"));
        template = template.Replace("[CREATEDBY]", blog.CreatedBy);
        template = template.Replace("[CREATEDON]", blog.CreatedOn.ToShortDateString());
        template = template.Replace("[URL]", FormatUrl(blog));
        return template;
    }

    private async Task Subscribe()
    {
        if (!string.IsNullOrEmpty(_email) && Utilities.IsValidEmail(_email))
        {
            if (string.IsNullOrEmpty(_validation) && DateTime.TryParseExact(_date, "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime timestamp) && (DateTime.UtcNow - timestamp).TotalSeconds >= _mintime && (DateTime.UtcNow - timestamp).TotalSeconds <= _maxtime)
            {
                var subscriber = new Subscriber();
                subscriber.ModuleId = ModuleState.ModuleId;
                subscriber.Email = _email;
                await SubscriberService.AddSubscriberAsync(subscriber);
                AddModuleMessage(Localizer["Activated"], MessageType.Success, "bottom");
                _email = "";
            }
            else // try again
            {
                AddModuleMessage(Localizer["DateInvalid"], MessageType.Warning, "bottom");
            }
        }
        else
        {
            AddModuleMessage(Localizer["EmailInvalid"], MessageType.Warning, "bottom");
        }
    }
}
