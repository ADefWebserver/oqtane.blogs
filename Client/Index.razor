@using Microsoft.Extensions.Localization
@using Oqtane.Blogs.Services
@using Oqtane.Blogs.Models

@namespace Oqtane.Blogs
@inherits ModuleBase
@inject IBlogService BlogService
@inject NavigationManager NavigationManager
@inject ISettingService SettingService
@inject IStringLocalizer<Index> Localizer

@if (_blogs != null)
{
    if (PageState.QueryString.ContainsKey("id"))
    {
        if (_blogs.Count > 0)
        {
            <h2>@_blogs[0].Title</h2>
            <p>
                @((MarkupString)Utilities.FormatContent(_blogs[0].Content, PageState.Alias, "render"))
                <br /><br /><b>@Localizer["Posted by"]</b> @_blogs[0].CreatedBy <b>@Localizer["on"]</b> @_blogs[0].CreatedOn.ToShortDateString()
            </p>
            <NavLink class="btn btn-secondary" href="@NavigateUrl()">@Localizer["View All Blogs"]</NavLink>
        }
    }
    else
    {
        <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" ResourceKey="AddBlog" Text="Add Blog" />
        <Pager Format="Grid" Items="@_blogs">
            <Row>
                <div class="col">
                    <br />
                    <a href="@NavigateUrl(PageState.Page.Path, "id=" + context.BlogId.ToString())">
                        <h2>@context.Title</h2>
                    </a>
                    <p>
                        <b>@Localizer["Posted by"]</b> @context.CreatedBy <b>@Localizer["on"]</b> @context.CreatedOn.ToShortDateString()
                        <br />
                        @if (context.Content.Length > _summarylength)
                        {
                            @((MarkupString)Utilities.FormatContent(context.Content.Substring(0, _summarylength), PageState.Alias, "render"))
                        }
                        else
                        {
                            @((MarkupString)Utilities.FormatContent(context.Content, PageState.Alias, "render"))
                        }
                    </p>
                    <div>
                        <NavLink class="btn btn-secondary" href="@NavigateUrl(PageState.Page.Path, "id=" + context.BlogId.ToString())">@Localizer["Details"]</NavLink>
                        <ActionLink Action="Edit" Parameters="@($"id=" + context.BlogId.ToString())" ResourceKey="EditBlog" Text="Edit" />
                        <ActionDialog Header="Delete Blog" Message="Are You Sure You Wish To Delete This Blog?" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" ResourceKey="DeleteBlog" OnClick="@(async () => await DeleteBlog(context.BlogId))" />
                    </div>
                </div>
            </Row>
        </Pager>
    }
    <br />
}

@code {
    private List<Blog> _blogs;
    private int _maxblogs;
    private int _summarylength;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Dictionary<string, string> settings = await SettingService.GetModuleSettingsAsync(ModuleState.ModuleId);
            _maxblogs = int.Parse(SettingService.GetSetting(settings, "MaxBogs", "20"));
            _summarylength = int.Parse(SettingService.GetSetting(settings, "SummaryLength", "500"));

            if (PageState.QueryString.ContainsKey("id"))
            {
                _blogs = new List<Blog>();
                _blogs.Add(await BlogService.GetBlogAsync(int.Parse(PageState.QueryString["id"]), ModuleState.ModuleId));
            }
            else
            {
                _blogs = await BlogService.GetBlogsAsync(ModuleState.ModuleId);
                _blogs = _blogs.OrderByDescending(item => item.CreatedOn).Take(_maxblogs).ToList();
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Blogs {Error}", ex.Message);
            ModuleInstance.AddModuleMessage(Localizer["Error Loading Blogs"], MessageType.Error);
        }
    }

    private async Task DeleteBlog(int id)
    {
        try
        {
            await BlogService.DeleteBlogAsync(id, ModuleState.ModuleId);
            await logger.LogInformation("Blog Deleted {BlogId}", id);
            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Blog {BlogId} {Error}", id, ex.Message);
            ModuleInstance.AddModuleMessage(Localizer["Error Deleting Blog"], MessageType.Error);
        }
    }
}
