@using Oqtane.Blogs.Services
@using Oqtane.Blogs.Models
@using Oqtane.Blogs.Shared
@using System.Globalization
@using System.Net

@namespace Oqtane.Blogs
@inherits ModuleBase
@inject IBlogService BlogService
@inject ISubscriberService SubscriberService
@inject NavigationManager NavigationManager
@inject ISettingService SettingService
@inject IStringLocalizer<Index> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (_blog != null)
{
    <div class="text-center"><NavLink class="btn btn-secondary btn-view-all" href="@NavigateUrl()">@Localizer["ViewAll"]</NavLink></div>
    <br />
    @if (_blog.PublishedBlogContent == null && UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList))
    {
        <div class="alert alert-warning">
            <p class="mb-0">@Localizer["NotPublished"]</p>
        </div>
    }
    @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode)
    {
        <div class="text-center">
            <ActionLink Action="Edit" Parameters="@($"id=" + _blog.BlogId.ToString())" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="EditBlog" Text="Edit" />
        </div>
    }
    @((MarkupString)Utilities.FormatContent(FormatTemplate(_detail, _blog), PageState.Alias, "render"))

    @if (SettingService.GetSetting(ModuleState.Settings, "Subscriptions", "False") == "True")
    {
        <br />
        <div class="text-center"><strong>@Localizer["Notify"]</strong></div>
        <div class="container mt-2">
            <div class="row mb-1 justify-content-center">
                <div class="col-sm-12 col-md-9 col-lg-6">
                    <form method="post" @onsubmit="Subscribe" @formname="BlogSubscriptionForm" data-enhance>
                        <input type="hidden" name="@Constants.RequestVerificationToken" value="@SiteState.AntiForgeryToken" />
                        <div class="input-group">
                            <input name="email" class="form-control" placeholder="@Localizer["Email"]" @bind="@_email" />
                            <button type="submit" class="btn btn-primary">@Localizer["Subscribe"]</button>
                            <a href="@_rss" target="_new" class="btn btn-secondary">@Localizer["RSS"]</a>
                        </div>
                        <input type="hidden" name="validation" @bind="@_validation" />
                        <input type="hidden" name="date" @bind="@_date" />
                    </form>
                </div>
            </div>
        </div>
    }
    <br />
    <div class="text-center"><NavLink class="btn btn-secondary btn-view-all" href="@NavigateUrl()">@Localizer["ViewAll"]</NavLink></div>
}
else
{
    @if (_blogs != null)
    {
        @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode)
        {
            <div class="text-center mb-2">
                <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="AddBlog" Text="Add Blog" />
            </div>
        }
        
        @if (_blogs.Any())
        {
            @((MarkupString)_summaryHeader)
            <Pager Format="Grid" Items="@_blogs" DisplayPages="10" PageSize="@_items.ToString()" ColumnClass="@_columnCssClass" SearchProperties="@_searchProperties" Toolbar="@_searchPosition">
                <Row>
                    @((MarkupString)Utilities.FormatContent(FormatTemplate(_summary, context), PageState.Alias, "render"))
                    @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode)
                    {
                        <div class ="text-center">
                            <ActionLink Action="Edit" Parameters="@($"id=" + context.BlogId.ToString())" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="EditBlog" Text="Edit" />
                        </div>
                    }
                </Row>
            </Pager>
            @((MarkupString)_summaryFooter)
        }
        else
        {
            <div class="text-center">@Localizer["NoBlogs"]</div>
        }
        @if (SettingService.GetSetting(ModuleState.Settings, "Subscriptions", "False") == "True")
        {
            <br />
            <div class="text-center"><strong>@Localizer["Notify"]</strong></div>
            <div class="container mt-2">
                <div class="row mb-1 justify-content-center">
                    <div class="col-sm-12 col-md-9 col-lg-6">
                        <form method="post" @onsubmit="Subscribe" @formname="BlogSubscriptionForm" data-enhance>
                            <input type="hidden" name="@Constants.RequestVerificationToken" value="@SiteState.AntiForgeryToken" />
                            <div class="input-group">
                                <input name="email" class="form-control" placeholder="@Localizer["Email"]" @bind="@_email" />
                                <button type="submit" class="btn btn-primary">@Localizer["Subscribe"]</button>
                                <a href="@_rss" target="_new" class="btn btn-secondary">@Localizer["RSS"]</a>
                            </div>
                            <input type="hidden" name="validation" @bind="@_validation" />
                            <input type="hidden" name="date" @bind="@_date" />
                        </form>
                    </div>
                </div>
            </div>

        }
    }
}
<br />

@code {
    public override string UrlParametersTemplate => "/{slug}";
    public override string RenderMode => RenderModes.Static;

    [SupplyParameterFromForm(FormName = "BlogSubscriptionForm")]
    public string email { get => ""; set => _email = value; }

    [SupplyParameterFromForm(FormName = "BlogSubscriptionForm")]
    public string validation { get => ""; set => _validation = value; }

    [SupplyParameterFromForm(FormName = "BlogSubscriptionForm")]
    public string date { get => ""; set => _date = value; }

    private List<Blog> _blogs;
    private Blog _blog;
    private int _items;
    private string _summary;
    private string _detail;
    private string _summaryHeader;
    private string _summaryFooter;
    private string _searchProperties;
    private string _searchPosition;
    private string _columnCssClass;
    private string _metaDescription;
    private string _metaRobots;
    private string _email = "";
    private string _validation = "";
    private string _date = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
    private int _mintime = 5; // 5 second minimum
    private int _maxtime = 300; // 5 minute maximum
    private string _rss = "";

    protected override async Task OnInitializedAsync()
    {
        if (PageState.QueryString.ContainsKey("guid"))
        {
            await SubscriberService.DeleteSubscriberAsync(ModuleState.ModuleId, PageState.QueryString["guid"]);
            AddModuleMessage(Localizer["Unsubscribed"], MessageType.Success);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _items = int.Parse(SettingService.GetSetting(ModuleState.Settings, "Items", "10"));
            _summary = SettingService.GetSetting(ModuleState.Settings, "Summary", BlogConstants.DefaultSummaryTemplate);
            _detail = SettingService.GetSetting(ModuleState.Settings, "Detail", BlogConstants.DefaultDetailTemplate);
            _searchProperties = SettingService.GetSetting(ModuleState.Settings, "SearchProperties", BlogConstants.DefaultSearchProperties);
            _searchPosition = SettingService.GetSetting(ModuleState.Settings, "SearchPosition", string.Empty);
            _columnCssClass = SettingService.GetSetting(ModuleState.Settings, "ColumnCssClass", BlogConstants.DefaultColumnCssClass);
            _metaDescription = SettingService.GetSetting(ModuleState.Settings, "MetaDescription", string.Empty);
            _metaRobots = SettingService.GetSetting(ModuleState.Settings, "MetaRobots", "INDEX, FOLLOW");

            var summaryItemTemplate = string.Empty;
            if (BlogUtilities.ParseListTemplate(_summary, out summaryItemTemplate, out _summaryHeader, out _summaryFooter))
            {
                _summary = summaryItemTemplate;
            }

            _blog = null;
            if (!string.IsNullOrEmpty(PageState.UrlParameters))
            {
                if (UrlParameters.ContainsKey("id"))
                {
                    _blog = await BlogService.GetBlogAsync(int.Parse(UrlParameters["id"]), ModuleState.ModuleId);
                }
                else if(UrlParameters.ContainsKey("slug"))
                {
                    _blog = await BlogService.GetBlogBySlugAsync(UrlParameters["slug"], ModuleState.ModuleId);
                }

                if (_blog != null && (_blog.PublishedBlogContent != null || PageState.EditMode))
                {
                    var blogContent = PageState.EditMode ? _blog.LatestBlogContent : _blog.PublishedBlogContent;
                    if(blogContent != null)
                    {
                        SetPageTitle(_blog.Title);

                        if (!string.IsNullOrEmpty(blogContent.Summary))
                        {
                            AddHeadContent($"<meta name=\"description\" content=\"{blogContent.Summary}\" />");
                        }
                        if (!string.IsNullOrEmpty(_blog.Tags))
                        {
                            AddHeadContent($"<meta name=\"keywords\" content=\"{_blog.Tags}\" />");
                        }
                    }

                    //update views
                    _blog.Views++;
                    await BlogService.UpdateBlogAsync(_blog);
                }
                else
                {
                    AddModuleMessage(Localizer["NotFound"], MessageType.Error);
                    _blog = null;
                }
            }
            if (_blog == null)
            {
                await GetBlogs();

                if (!string.IsNullOrEmpty(_metaDescription))
                {
                    AddHeadContent($"<meta name=\"description\" content=\"{_metaDescription}\" />");
                }
            }

            if (!string.IsNullOrEmpty(_metaRobots))
            {
                AddHeadContent($"<meta name=\"robots\" content=\"{_metaRobots}\" />");
            }

            _rss = $"/api/blog/rss/{ModuleState.ModuleId}";
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Blogs {Error}", ex.Message);
        }
    }

    private async Task GetBlogs()
    {
        _blog = null;
        var searchQuery = new BlogSearch
        {
            Keywords = string.Empty,
            IncludeDraft = UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode,
            Categories = PageState.QueryString.ContainsKey("category") ? WebUtility.UrlDecode(PageState.QueryString["category"]) : string.Empty,
            Tags = PageState.QueryString.ContainsKey("tag") ? WebUtility.UrlDecode(PageState.QueryString["tag"]) : string.Empty,
            StartDate = null,
            EndDate = null,
            PageIndex = 0,
            PageSize = 0,
            SortBy = string.Empty,
            SortByDescending = true
        };

        if(PageState.QueryString.ContainsKey("year") && int.TryParse(PageState.QueryString["year"], out int year))
        {
            if (!PageState.QueryString.ContainsKey("month") || !int.TryParse(PageState.QueryString["month"], out int month))
            {
                month = 0;
            }

            searchQuery.StartDate = new DateTime(year, month == 0 ? 1 : month, 1);
            searchQuery.EndDate = month == 0 ? searchQuery.StartDate.Value.AddYears(1) : searchQuery.StartDate.Value.AddMonths(1);
        }

        _blogs = await BlogService.GetBlogsAsync(ModuleState.ModuleId, searchQuery);
    }

    private string FormatTemplate(string template, Blog blog)
    {
        var blogContent = PageState.EditMode ? blog.LatestBlogContent : blog.PublishedBlogContent;
        var blogPageUrl = Utilities.NavigateUrl(PageState.Alias.Path, PageState.Page.Path, string.Empty);
        var publishDate = blogContent.PublishStatus == PublishStatus.Scheduled
                                        ? blogContent.PublishDate.GetValueOrDefault(DateTime.MinValue)
                                        : blogContent.CreatedOn;

        template = template.Replace("[ID]", blog.BlogId.ToString());
        template = template.Replace("[TITLE]", blog.Title);
        template = template.Replace("[SLUG]", blog.Slug);
        template = template.Replace("[VIEWS]", blog.Views.ToString());
        template = template.Replace("[THUMBNAILPATH]", blog.Thumbnail);
        template = template.Replace("[ALTERNATETEXT]", blog.AlternateText);
        template = template.Replace("[THUMBNAIL]", BlogUtilities.FormatThumbnail(blog));
        template = template.Replace("[CATEGORIES]", BlogUtilities.FormatCategories(blog, blogPageUrl));
        template = template.Replace("[TAGS]", BlogUtilities.FormatTags(blog, blogPageUrl));
        template = template.Replace("[SUMMARY]", blogContent.Summary);
        template = template.Replace("[CONTENT]", Utilities.FormatContent(blogContent.Content, PageState.Alias, "render"));
        template = template.Replace("[CREATEDBY]", blog.CreatedBy);
        template = template.Replace("[CREATEDON]", blog.CreatedOn.ToShortDateString());
        template = template.Replace("[URL]", BlogUtilities.FormatUrl(PageState.Alias.Path, PageState.Page.Path, blog));
        template = template.Replace("[PUBLISHDATE]", BlogUtilities.FormatDate(publishDate, "MMMM dd, yyyy"));
        template = template.Replace("[PUBLISHDAY]", BlogUtilities.FormatDate(publishDate, "dd"));
        template = template.Replace("[PUBLISHMONTH]", BlogUtilities.FormatDate(publishDate, "MMMM"));
        return template;
    }

    private async Task Subscribe()
    {
        if (!string.IsNullOrEmpty(_email) && Utilities.IsValidEmail(_email))
        {
            if (string.IsNullOrEmpty(_validation) && DateTime.TryParseExact(_date, "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime timestamp) && (DateTime.UtcNow - timestamp).TotalSeconds >= _mintime && (DateTime.UtcNow - timestamp).TotalSeconds <= _maxtime)
            {
                var subscriber = new Subscriber();
                subscriber.ModuleId = ModuleState.ModuleId;
                subscriber.Email = _email;
                await SubscriberService.AddSubscriberAsync(subscriber);
                AddModuleMessage(Localizer["Activated"], MessageType.Success, "bottom");
                _email = "";
            }
            else // try again
            {
                AddModuleMessage(Localizer["DateInvalid"], MessageType.Warning, "bottom");
            }
        }
        else
        {
            AddModuleMessage(Localizer["EmailInvalid"], MessageType.Warning, "bottom");
        }
    }
}
