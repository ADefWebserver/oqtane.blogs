@using Oqtane.Blogs.Services
@using Oqtane.Blogs.Models
@using Oqtane.Blogs.Shared
@using System.Globalization
@using System.Net

@namespace Oqtane.Blogs
@inherits ModuleBase
@inject IBlogService BlogService
@inject ICategoryService CategoryService
@inject IFileService FileService
@inject ISubscriberService SubscriberService
@inject NavigationManager NavigationManager
@inject ISettingService SettingService
@inject IStringLocalizer<Index> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (_blog != null)
{
    <div class="text-center"><NavLink class="btn btn-secondary btn-view-all" href="@NavigateUrl()">@Localizer["ViewAll"]</NavLink></div>
    <br />
    @if (_blog.PublishedBlogContent == null && UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList))
    {
        <div class="alert alert-warning">
            <p class="mb-0">@Localizer["NotPublished"]</p>
        </div>
    }
    @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode)
    {
        <div class="text-center">
            <ActionLink Action="Edit" Parameters="@($"id=" + _blog.BlogId.ToString())" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="EditBlog" Text="Edit" />
        </div>
    }
    @((MarkupString)Utilities.FormatContent(FormatTemplate(_detail, _blog), PageState.Alias, "render"))

    @if (SettingService.GetSetting(ModuleState.Settings, "Subscriptions", "False") == "True")
    {
        <br />
        <div class="text-center"><strong>@Localizer["Notify"]</strong></div>
        <div class="container mt-2">
            <div class="row mb-1 justify-content-center">
                <div class="col-sm-12 col-md-9 col-lg-6">
                    <form method="post" @onsubmit="Subscribe" @formname="BlogSubscriptionForm" data-enhance>
                        <input type="hidden" name="@Constants.RequestVerificationToken" value="@SiteState.AntiForgeryToken" />
                        <div class="input-group">
                            <input name="email" class="form-control" placeholder="@Localizer["Email"]" @bind="@_email" />
                            <button type="submit" class="btn btn-primary">@Localizer["Subscribe"]</button>
                            <a href="@_rss" target="_new" class="btn btn-secondary">@Localizer["RSS"]</a>
                        </div>
                        <input type="hidden" name="validation" @bind="@_validation" />
                        <input type="hidden" name="date" @bind="@_date" />
                    </form>
                </div>
            </div>
        </div>
    }
    <br />
    <div class="text-center"><NavLink class="btn btn-secondary btn-view-all" href="@NavigateUrl()">@Localizer["ViewAll"]</NavLink></div>
}
else
{
    @if (_blogs != null)
    {
        @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode)
        {
            <div class="text-center mb-2">
                <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="AddBlog" Text="Add Blog" />
            </div>
        }
        
        @if (_blogs.Any())
        {
            @((MarkupString)_summaryHeader)
            <Pager Format="Grid" Items="@_blogs" DisplayPages="10" PageSize="@_items.ToString()" ColumnClass="@_columnCssClass" SearchProperties="@_searchProperties" Toolbar="@_pagerPosition">
                <Row>
                    @((MarkupString)Utilities.FormatContent(FormatTemplate(_summary, context), PageState.Alias, "render"))
                    @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode)
                    {
                        <div class ="text-center">
                            <ActionLink Action="Edit" Parameters="@($"id=" + context.BlogId.ToString())" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="EditBlog" Text="Edit" />
                        </div>
                    }
                </Row>
            </Pager>
            @((MarkupString)_summaryFooter)
        }
        else
        {
            <div class="text-center">@Localizer["NoBlogs"]</div>
        }
        @if (SettingService.GetSetting(ModuleState.Settings, "Subscriptions", "False") == "True")
        {
            <br />
            <div class="text-center"><strong>@Localizer["Notify"]</strong></div>
            <div class="container mt-2">
                <div class="row mb-1 justify-content-center">
                    <div class="col-sm-12 col-md-9 col-lg-6">
                        <form method="post" @onsubmit="Subscribe" @formname="BlogSubscriptionForm" data-enhance>
                            <input type="hidden" name="@Constants.RequestVerificationToken" value="@SiteState.AntiForgeryToken" />
                            <div class="input-group">
                                <input name="email" class="form-control" placeholder="@Localizer["Email"]" @bind="@_email" />
                                <button type="submit" class="btn btn-primary">@Localizer["Subscribe"]</button>
                                <a href="@_rss" target="_new" class="btn btn-secondary">@Localizer["RSS"]</a>
                            </div>
                            <input type="hidden" name="validation" @bind="@_validation" />
                            <input type="hidden" name="date" @bind="@_date" />
                        </form>
                    </div>
                </div>
            </div>

        }
    }
}
<br />

@code {
    public override string UrlParametersTemplate => "/{slug}";
    public override string RenderMode => RenderModes.Static;

    [SupplyParameterFromForm(FormName = "BlogSubscriptionForm")]
    public string email { get => ""; set => _email = value; }

    [SupplyParameterFromForm(FormName = "BlogSubscriptionForm")]
    public string validation { get => ""; set => _validation = value; }

    [SupplyParameterFromForm(FormName = "BlogSubscriptionForm")]
    public string date { get => ""; set => _date = value; }

    private List<Blog> _blogs;
    private Blog _blog;
    private int _items;
    private string _summary;
    private string _detail;
    private string _summaryHeader;
    private string _summaryFooter;
    private string _searchProperties;
    private string _pagerPosition;
    private string _columnCssClass;
    private string _email = "";
    private string _validation = "";
    private string _date = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
    private int _mintime = 5; // 5 second minimum
    private int _maxtime = 300; // 5 minute maximum
    private string _rss = "";
    private string _blogName;
    private string _pageTitle;
    private string _archiveTitle;
    private string _categoryTitle;
    private string _tagTitle;
    private string _archiveDescription;
    private string _categoryDescription;
    private string _tagDescription;
    private string _paginationTitle;
    private string _metaTags;
    private string _baseUrl;
    private string _categoryName;

    protected override async Task OnInitializedAsync()
    {
        if (PageState.QueryString.ContainsKey("guid"))
        {
            await SubscriberService.DeleteSubscriberAsync(ModuleState.ModuleId, PageState.QueryString["guid"]);
            AddModuleMessage(Localizer["Unsubscribed"], MessageType.Success);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _baseUrl = PageState.Alias.Protocol + PageState.Alias.Name.Replace("/" + PageState.Alias.Path, "");

            if (PageState.QueryString.ContainsKey("category") && int.TryParse(PageState.QueryString["category"], out int categoryId))
            {
                _categoryName = (await CategoryService.GetCategorySourcesAsync(ModuleState.ModuleId)).FirstOrDefault(i => i.CategorySourceId == categoryId)?.Name ?? string.Empty;
            }

            _items = int.Parse(SettingService.GetSetting(ModuleState.Settings, "Items", "10"));
            _summary = SettingService.GetSetting(ModuleState.Settings, "Summary", BlogConstants.DefaultSummaryTemplate);
            _detail = SettingService.GetSetting(ModuleState.Settings, "Detail", BlogConstants.DefaultDetailTemplate);
            _searchProperties = SettingService.GetSetting(ModuleState.Settings, "SearchProperties", BlogConstants.DefaultSearchProperties);
            _pagerPosition = SettingService.GetSetting(ModuleState.Settings, "PagerPosition", BlogConstants.DefaultPagerPosition);
            _columnCssClass = SettingService.GetSetting(ModuleState.Settings, "ColumnCssClass", BlogConstants.DefaultColumnCssClass);
            _blogName = SettingService.GetSetting(ModuleState.Settings, "BlogName", "Blog");
            _metaTags = SettingService.GetSetting(ModuleState.Settings, "MetaTags", string.Empty);
            _pageTitle = SettingService.GetSetting(ModuleState.Settings, "PageTitle", "[BlogName] | [Post:title]");
            _archiveTitle = SettingService.GetSetting(ModuleState.Settings, "ArchiveTitle", "[BlogName] | [Month] [Year]");
            _categoryTitle = SettingService.GetSetting(ModuleState.Settings, "CategoryTitle", "[BlogName] | [Category]");
            _tagTitle = SettingService.GetSetting(ModuleState.Settings, "TagTitle", "[BlogName] | [Tag]");
            _archiveDescription = SettingService.GetSetting(ModuleState.Settings, "ArchiveDescription", "Find all [BlogName] posts published on [Month] [Year]");
            _categoryDescription = SettingService.GetSetting(ModuleState.Settings, "CategoryDescription", "Find all [BlogName] posts in category [Category]");
            _tagDescription = SettingService.GetSetting(ModuleState.Settings, "TagDescription", "Find all [BlogName] posts tagged with [Tag]");
            _paginationTitle = SettingService.GetSetting(ModuleState.Settings, "PaginationTitle", " | Page [PageNumber]");

            var summaryItemTemplate = string.Empty;
            if (BlogUtilities.ParseListTemplate(_summary, out summaryItemTemplate, out _summaryHeader, out _summaryFooter))
            {
                _summary = summaryItemTemplate;
            }

            _blog = null;
            if (!string.IsNullOrEmpty(PageState.UrlParameters))
            {
                if (UrlParameters.ContainsKey("id"))
                {
                    _blog = await BlogService.GetBlogAsync(int.Parse(UrlParameters["id"]), ModuleState.ModuleId);
                }
                else if(UrlParameters.ContainsKey("slug"))
                {
                    _blog = await BlogService.GetBlogBySlugAsync(UrlParameters["slug"], ModuleState.ModuleId);
                }

                if (_blog != null && (_blog.PublishedBlogContent != null || PageState.EditMode))
                {
                    var blogContent = PageState.EditMode ? _blog.LatestBlogContent : _blog.PublishedBlogContent;
                    if(blogContent != null)
                    {
                        SetPageTitle(FormatTemplate(_pageTitle, _blog));

                        if (!string.IsNullOrEmpty(blogContent.Summary))
                        {
                            AddHeadContent($"<meta name=\"description\" content=\"{blogContent.Summary}\" />");
                        }
                        if (!string.IsNullOrEmpty(_blog.Tags))
                        {
                            AddHeadContent($"<meta name=\"keywords\" content=\"{_blog.Tags}\" />");
                        }

                        if(!string.IsNullOrEmpty(_metaTags))
                        {
                            AddHeadContent(FormatTemplate(_metaTags, _blog));
                        }

                        AddHeadContent($"<link rel=\"canonical\" href=\"{_baseUrl}{BlogUtilities.FormatUrl(PageState.Alias.Path, PageState.Page.Path, _blog)}\">");
                    }

                    //update views
                    _blog.Views++;
                    await BlogService.UpdateBlogAsync(_blog);
                }
                else
                {
                    AddModuleMessage(Localizer["NotFound"], MessageType.Error);
                    _blog = null;
                }
            }
            if (_blog == null)
            {
                await GetBlogs();
                SetListMetaTags();
            }

            AddHeadContent($"<meta name=\"robots\" content=\"INDEX, FOLLOW\" />");

            _rss = $"/api/blog/rss/{ModuleState.ModuleId}";
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Blogs {Error}", ex.Message);
        }
    }

    private async Task GetBlogs()
    {
        _blog = null;
        var searchQuery = new BlogSearch
        {
            Keywords = string.Empty,
            IncludeDraft = UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode,
            Categories = PageState.QueryString.ContainsKey("category") ? WebUtility.UrlDecode(PageState.QueryString["category"]) : string.Empty,
            Tags = PageState.QueryString.ContainsKey("tag") ? WebUtility.UrlDecode(PageState.QueryString["tag"]) : string.Empty,
            StartDate = null,
            EndDate = null,
            PageIndex = 0,
            PageSize = 0,
            SortBy = string.Empty,
            SortByDescending = true
        };

        if(PageState.QueryString.ContainsKey("year") && int.TryParse(PageState.QueryString["year"], out int year))
        {
            if (!PageState.QueryString.ContainsKey("month") || !int.TryParse(PageState.QueryString["month"], out int month))
            {
                month = 0;
            }

            searchQuery.StartDate = new DateTime(year, month == 0 ? 1 : month, 1);
            searchQuery.EndDate = month == 0 ? searchQuery.StartDate.Value.AddYears(1) : searchQuery.StartDate.Value.AddMonths(1);
        }

        _blogs = await BlogService.GetBlogsAsync(ModuleState.ModuleId, searchQuery);
    }

    private string FormatTemplate(string template, Blog blog)
    {
        var blogContent = blog != null ? (PageState.EditMode ? blog.LatestBlogContent : blog.PublishedBlogContent) : null;
        var blogPageUrl = Utilities.NavigateUrl(PageState.Alias.Path, PageState.Page.Path, string.Empty);
        DateTime? publishDate = blogContent != null ? (blogContent.PublishStatus == PublishStatus.Scheduled
                                        ? blogContent.PublishDate.GetValueOrDefault(DateTime.MinValue)
                                        : blogContent.CreatedOn) : null;
        var thumbnailPath = blog?.Thumbnail > 0 ? Utilities.FileUrl(PageState.Alias, blog.Thumbnail) : string.Empty;

        template = template.Replace("[ID]", blog?.BlogId.ToString(), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[TITLE]", blog?.Title, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[SLUG]", blog?.Slug, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[VIEWS]", blog?.Views.ToString(), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[THUMBNAILPATH]", thumbnailPath, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[ALTERNATETEXT]", blog?.AlternateText, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[THUMBNAIL]", BlogUtilities.FormatThumbnail(blog, thumbnailPath), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[CATEGORIES]", BlogUtilities.FormatCategories(blog, blogPageUrl), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[TAGS]", BlogUtilities.FormatTags(blog, blogPageUrl), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[SUMMARY]", blogContent?.Summary, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[CONTENT]", Utilities.FormatContent(blogContent?.Content, PageState.Alias, "render"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[CREATEDBY]", blog?.CreatedBy, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[CREATEDON]", blog?.CreatedOn.ToShortDateString(), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[URL]", BlogUtilities.FormatUrl(PageState.Alias.Path, PageState.Page.Path, blog), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[PUBLISHEDON]", BlogUtilities.FormatDate(publishDate, "MMMM dd, yyyy"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[PUBLISHEDBY]", blogContent?.CreatedBy, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[MODIFIEDON]", BlogUtilities.FormatDate(blogContent?.ModifiedOn, "MMMM dd, yyyy"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[PUBLISHDAY]", BlogUtilities.FormatDate(publishDate, "dd"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[PUBLISHMONTH]", BlogUtilities.FormatDate(publishDate, "MMMM"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[BLOGNAME]", _blogName, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[CATEGORY]", _categoryName, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[MONTH]", GetQueryString("month"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[YEAR]", GetQueryString("year"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[POST:TITLE]", blog?.Title, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[POST:SUMMARY]", blogContent?.Summary, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[PAGENUMBER]", GetQueryString("page"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[TAG]", GetQueryString("tag"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[TAGSMETA]", GenerateTagsMeta(blog), StringComparison.OrdinalIgnoreCase);

        return template;
    }

    private void SetListMetaTags()
    {
        var title = string.Empty;
        var description = string.Empty;
        if (PageState.QueryString.ContainsKey("category"))
        {
            title = FormatTemplate(_categoryTitle, null);
            description = FormatTemplate(_categoryDescription, null);
        }
        else if (PageState.QueryString.ContainsKey("tag"))
        {
            title = FormatTemplate(_tagTitle, null);
            description = FormatTemplate(_tagDescription, null);
        }
        else if (PageState.QueryString.ContainsKey("year") || PageState.QueryString.ContainsKey("month"))
        {
            title = FormatTemplate(_archiveTitle, null);
            description = FormatTemplate(_archiveDescription, null);
        }

        if(!string.IsNullOrEmpty(title))
        {
            SetPageTitle(title);
        }

        if (!string.IsNullOrEmpty(description))
        {
            AddHeadContent($"<meta name=\"description\" content=\"{description}\" />");
        }
    }

    private string GetQueryString(string key)
    {
        if(PageState.QueryString.ContainsKey(key))
        {
            var value = WebUtility.UrlDecode(PageState.QueryString[key]);
            if (value == WebUtility.HtmlEncode(value) && value == WebUtility.HtmlDecode(value))
            {
                return value;
            }
        }

        return string.Empty;
    }

    private string GenerateTagsMeta(Blog blog)
    {
        if(blog?.BlogTags != null)
        {
            return string.Join("", blog.BlogTags.Select(i =>
            {
                return $"<meta property=\"og:tag\" content=\"{i.TagSource.Tag}\" />";
            }));
        }

        return string.Empty;
    }

    private async Task Subscribe()
    {
        if (!string.IsNullOrEmpty(_email) && Utilities.IsValidEmail(_email))
        {
            if (string.IsNullOrEmpty(_validation) && DateTime.TryParseExact(_date, "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime timestamp) && (DateTime.UtcNow - timestamp).TotalSeconds >= _mintime && (DateTime.UtcNow - timestamp).TotalSeconds <= _maxtime)
            {
                var subscriber = new Subscriber();
                subscriber.ModuleId = ModuleState.ModuleId;
                subscriber.Email = _email;
                await SubscriberService.AddSubscriberAsync(subscriber);
                AddModuleMessage(Localizer["Activated"], MessageType.Success, "bottom");
                _email = "";
            }
            else // try again
            {
                AddModuleMessage(Localizer["DateInvalid"], MessageType.Warning, "bottom");
            }
        }
        else
        {
            AddModuleMessage(Localizer["EmailInvalid"], MessageType.Warning, "bottom");
        }
    }
}
