@using Oqtane.Blogs.Services
@using Oqtane.Blogs.Models
@using Oqtane.Blogs.Shared

@namespace Oqtane.Blogs
@inherits ModuleBase
@inject IBlogService BlogService
@inject ISubscriberService SubscriberService
@inject NavigationManager NavigationManager
@inject ISettingService SettingService
@inject IStringLocalizer<Index> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (_blog != null)
{
    <div class="text-center"><NavLink class="btn btn-secondary" href="@NavigateUrl()">@Localizer["ViewAll"]</NavLink></div>
    <br />
    @if (!_blog.Published && UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList))
    {
        <div class="alert alert-warning">
            <p class="mb-0">@Localizer["NotPublished"]</p>
        </div>
    }
    @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode)
    {
        <div class="text-center">
            <ActionLink Action="Edit" Parameters="@($"id=" + _blog.BlogId.ToString())" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="EditBlog" Text="Edit" />
            <ActionDialog Header="Delete Blog" Message="Are You Sure You Wish To Delete This Blog?" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" ResourceKey="DeleteBlog" OnClick="@(async () => await DeleteBlog(_blog.BlogId))" />
        </div>
    }
    @((MarkupString)Utilities.FormatContent(FormatTemplate(_detail, _blog), PageState.Alias, "render"))

    @if (SettingService.GetSetting(ModuleState.Settings, "Subscriptions", "False") == "True")
    {
        <br />
        <div class="text-center"><strong>@Localizer["Notify"]</strong></div>
        <div class="container mt-2">
            <div class="row mb-1 justify-content-center">
                <div class="col-sm-12 col-md-9 col-lg-6">
                    <div class="input-group">
                        <input class="form-control" placeholder="@Localizer["Email"]" @bind="@_email" />
                        <button type="button" class="btn btn-primary" @onclick="Subscribe">@Localizer["Subscribe"]</button>
                        <a href="@_rss" target="_new" class="btn btn-secondary">@Localizer["RSS"]</a>
                    </div>
                </div>
            </div>
        </div>
    }
    <br />
    <div class="text-center"><NavLink class="btn btn-secondary" href="@NavigateUrl()">@Localizer["ViewAll"]</NavLink></div>
}
else
{
    @if (_blogs != null)
    {
        <div class="container">
            <div class="row mb-1 justify-content-center">
                <div class="col-sm-12 col-md-9 col-lg-6">
                    <div class="input-group">
                        @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode)
                        {
                            <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="AddBlog" Text="Add Blog" />
                        }
                        <input class="form-control" @bind="@_search" />
                        <button type="button" class="btn btn-primary" @onclick="Search">@SharedLocalizer["Search"]</button>
                        <button type="button" class="btn btn-secondary" @onclick="Reset">@SharedLocalizer["Reset"]</button>
                    </div>
                </div>
            </div>
        </div>
        <br />
        @if (_blogs.Any())
        {
            <Pager Format="Grid" Items="@_blogs" DisplayPages="1" PageSize="@_items.ToString()" CurrentPage="@_page.ToString()" OnPageChange="OnPageChange" ColumnClass="col-lg-4 col-md-6">
                <Row>
                    @((MarkupString)Utilities.FormatContent(FormatTemplate(_summary, context), PageState.Alias, "render"))
                    @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode)
                    {
                        <div class ="text-center">
                            <ActionLink Action="Edit" Parameters="@($"id=" + context.BlogId.ToString())" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="EditBlog" Text="Edit" />
                            <ActionDialog Header="Delete Blog" Message="Are You Sure You Wish To Delete This Blog?" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" ResourceKey="DeleteBlog" OnClick="@(async () => await DeleteBlog(context.BlogId))" />
                        </div>
                    }
                </Row>
            </Pager>
        }
        else
        {
            <div class="text-center">@Localizer["NoBlogs"]</div>
        }
        @if (SettingService.GetSetting(ModuleState.Settings, "Subscriptions", "False") == "True")
        {
            <br />
            <div class="text-center"><strong>@Localizer["Notify"]</strong></div>
            <div class="container mt-2">
                <div class="row mb-1 justify-content-center">
                    <div class="col-sm-12 col-md-9 col-lg-6">
                        <div class="input-group">
                            <input class="form-control" placeholder="@Localizer["Email"]" @bind="@_email" />
                            <button type="button" class="btn btn-primary" @onclick="Subscribe">@Localizer["Subscribe"]</button>
                            <a href="@_rss" target="_new" class="btn btn-secondary">@Localizer["RSS"]</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
}
<br />

@code {
    public override string UrlParametersTemplate => "/{id}/{slug}";

    private List<Blog> _blogs;
    private Blog _blog;
    private int _items;
    private string _summary;
    private string _detail;
    private int _page = 1;
    private string _search = "";
    private string _email = "";
    private string _rss = "";

    protected override async Task OnInitializedAsync()
    {
        if (PageState.QueryString.ContainsKey("guid"))
        {
            await SubscriberService.DeleteSubscriberAsync(ModuleState.ModuleId, PageState.QueryString["guid"]);
            AddModuleMessage(Localizer["Unsubscribed"], MessageType.Success);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _items = int.Parse(SettingService.GetSetting(ModuleState.Settings, "Items", "10"));
            _summary = SettingService.GetSetting(ModuleState.Settings, "Summary", "<a href=\"[URL]\"><h2>[TITLE]</h2></a><p>[SUMMARY]</p>");
            _detail = SettingService.GetSetting(ModuleState.Settings, "Detail", "<h2>[TITLE]</h2><p>[CONTENT]</p>");

            if (PageState.QueryString.ContainsKey("page"))
            {
                _page = int.Parse(PageState.QueryString["page"]);
            }
            if (PageState.QueryString.ContainsKey("search"))
            {
                _search = PageState.QueryString["search"];
            }

            _blog = null;
            if (!string.IsNullOrEmpty(PageState.UrlParameters))
            {
                _blog = await BlogService.GetBlogAsync(int.Parse(UrlParameters["id"]), ModuleState.ModuleId);
                if (!_blog.Published && !UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList))
                {
                    _blog = null;
                }
            }
            if (_blog == null)
            {
                await GetBlogs();
            }

            _rss = $"/api/blog/rss/{ModuleState.ModuleId}";
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Blogs {Error}", ex.Message);
            ModuleInstance.AddModuleMessage(Localizer["ErrorLoading"], MessageType.Error);
        }
    }

    private async Task GetBlogs()
    {
        _blog = null;
        _blogs = await BlogService.GetBlogsAsync(ModuleState.ModuleId, _search);
        _blogs = _blogs.Where(item => item.Published || UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList)).ToList();
    }

    private string FormatUrl(Blog blog)
    {
        return NavigateUrl(PageState.Page.Path, AddUrlParameters(blog.BlogId, Common.FormatSlug(blog.Title)));
    }

    private string FormatTemplate(string template, Blog blog)
    {
        template = template.Replace("[ID]", blog.BlogId.ToString());
        template = template.Replace("[TITLE]", blog.Title);
        template = template.Replace("[SUMMARY]", blog.Summary);
        template = template.Replace("[CONTENT]", Utilities.FormatContent(blog.Content, PageState.Alias, "render"));
        template = template.Replace("[CREATEDBY]", blog.CreatedBy);
        template = template.Replace("[CREATEDON]", blog.CreatedOn.ToShortDateString());
        template = template.Replace("[URL]", FormatUrl(blog));
        return template;
    }

    private async Task DeleteBlog(int id)
    {
        try
        {
            await BlogService.DeleteBlogAsync(id, ModuleState.ModuleId);
            await logger.LogInformation("Blog Deleted {BlogId}", id);
            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Blog {BlogId} {Error}", id, ex.Message);
            ModuleInstance.AddModuleMessage(Localizer["ErrorDeleting"], MessageType.Error);
        }
    }

    private async Task Search()
    {
        _page = 1;
        await GetBlogs();
        StateHasChanged();
    }

    private async Task Reset()
    {
        _page = 1;
        _search = "";
        await GetBlogs();
        StateHasChanged();
    }

    private void OnPageChange(int page)
    {
        if (string.IsNullOrEmpty(PageState.UrlParameters))
        {
            _page = page;
        }
    }

    private async Task Subscribe()
    {
        if (!string.IsNullOrEmpty(_email) && Utilities.IsValidEmail(_email))
        {
            var subscriber = new Subscriber();
            subscriber.ModuleId = ModuleState.ModuleId;
            subscriber.Email = _email;
            await SubscriberService.AddSubscriberAsync(subscriber);
            AddModuleMessage(Localizer["Activated"], MessageType.Success);
            _email = "";
        }
        else
        {
            AddModuleMessage(Localizer["EmailInvalid"], MessageType.Warning);
        }
    }
}
